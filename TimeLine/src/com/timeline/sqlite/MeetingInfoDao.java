package com.timeline.sqlite;

import com.timeline.bean.MeetingInfo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MEETING_INFO.
*/
public class MeetingInfoDao extends AbstractDao<MeetingInfo, String> {

    public static final String TABLENAME = "MEETING_INFO";

    /**
     * Properties of entity MeetingInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Subject = new Property(1, String.class, "subject", false, "SUBJECT");
        public final static Property Describe = new Property(2, String.class, "describe", false, "DESCRIBE");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property Start_time = new Property(4, String.class, "start_time", false, "START_TIME");
        public final static Property End_time = new Property(5, String.class, "end_time", false, "END_TIME");
        public final static Property Servey_url = new Property(6, String.class, "servey_url", false, "SERVEY_URL");
        public final static Property Servey_st = new Property(7, String.class, "servey_st", false, "SERVEY_ST");
        public final static Property Start_date = new Property(8, String.class, "start_date", false, "START_DATE");
        public final static Property End_date = new Property(9, String.class, "end_date", false, "END_DATE");
        public final static Property Repeate = new Property(10, String.class, "repeate", false, "REPEATE");
        public final static Property Alertbeforetime = new Property(11, String.class, "alertbeforetime", false, "ALERTBEFORETIME");
        public final static Property Edit_TX1 = new Property(12, String.class, "Edit_TX1", false, "EDIT__TX1");
        public final static Property Edit_TX2 = new Property(13, String.class, "Edit_TX2", false, "EDIT__TX2");
        public final static Property Edit_TX3 = new Property(14, String.class, "Edit_TX3", false, "EDIT__TX3");
    };


    public MeetingInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MeetingInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MEETING_INFO' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'SUBJECT' TEXT," + // 1: subject
                "'DESCRIBE' TEXT," + // 2: describe
                "'ADDRESS' TEXT," + // 3: address
                "'START_TIME' TEXT," + // 4: start_time
                "'END_TIME' TEXT," + // 5: end_time
                "'SERVEY_URL' TEXT," + // 6: servey_url
                "'SERVEY_ST' TEXT," + // 7: servey_st
                "'START_DATE' TEXT," + // 8: start_date
                "'END_DATE' TEXT," + // 9: end_date
                "'REPEATE' TEXT," + // 10: repeate
                "'ALERTBEFORETIME' TEXT," + // 11: alertbeforetime
                "'EDIT__TX1' TEXT," + // 12: Edit_TX1
                "'EDIT__TX2' TEXT," + // 13: Edit_TX2
                "'EDIT__TX3' TEXT);"); // 14: Edit_TX3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MEETING_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MeetingInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(2, subject);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(3, describe);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(5, start_time);
        }
 
        String end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindString(6, end_time);
        }
 
        String servey_url = entity.getServey_url();
        if (servey_url != null) {
            stmt.bindString(7, servey_url);
        }
 
        String servey_st = entity.getServey_st();
        if (servey_st != null) {
            stmt.bindString(8, servey_st);
        }
 
        String start_date = entity.getStart_date();
        if (start_date != null) {
            stmt.bindString(9, start_date);
        }
 
        String end_date = entity.getEnd_date();
        if (end_date != null) {
            stmt.bindString(10, end_date);
        }
 
        String repeate = entity.getRepeate();
        if (repeate != null) {
            stmt.bindString(11, repeate);
        }
 
        String alertbeforetime = entity.getAlertbeforetime();
        if (alertbeforetime != null) {
            stmt.bindString(12, alertbeforetime);
        }
 
        String Edit_TX1 = entity.getEdit_TX1();
        if (Edit_TX1 != null) {
            stmt.bindString(13, Edit_TX1);
        }
 
        String Edit_TX2 = entity.getEdit_TX2();
        if (Edit_TX2 != null) {
            stmt.bindString(14, Edit_TX2);
        }
 
        String Edit_TX3 = entity.getEdit_TX3();
        if (Edit_TX3 != null) {
            stmt.bindString(15, Edit_TX3);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MeetingInfo readEntity(Cursor cursor, int offset) {
        MeetingInfo entity = new MeetingInfo( //
            cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subject
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // describe
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // start_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // end_time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // servey_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // servey_st
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // start_date
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // end_date
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // repeate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // alertbeforetime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Edit_TX1
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Edit_TX2
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // Edit_TX3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MeetingInfo entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setSubject(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescribe(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStart_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEnd_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setServey_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setServey_st(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStart_date(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEnd_date(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRepeate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAlertbeforetime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEdit_TX1(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEdit_TX2(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEdit_TX3(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MeetingInfo entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MeetingInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
